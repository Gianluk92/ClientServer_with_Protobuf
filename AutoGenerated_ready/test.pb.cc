// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* myproto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  myproto_reflection_ = NULL;
const ::google::protobuf::Descriptor* m_sum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_sum_reflection_ = NULL;
const ::google::protobuf::Descriptor* m_prod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_prod_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  myproto_descriptor_ = file->message_type(0);
  static const int myproto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myproto, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myproto, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myproto, c_),
  };
  myproto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      myproto_descriptor_,
      myproto::default_instance_,
      myproto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myproto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myproto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(myproto));
  m_sum_descriptor_ = file->message_type(1);
  static const int m_sum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_sum, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_sum, num1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_sum, num2_),
  };
  m_sum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      m_sum_descriptor_,
      m_sum::default_instance_,
      m_sum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_sum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_sum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(m_sum));
  m_prod_descriptor_ = file->message_type(2);
  static const int m_prod_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_prod, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_prod, num1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_prod, num2_),
  };
  m_prod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      m_prod_descriptor_,
      m_prod::default_instance_,
      m_prod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_prod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_prod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(m_prod));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    myproto_descriptor_, &myproto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    m_sum_descriptor_, &m_sum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    m_prod_descriptor_, &m_prod::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete myproto::default_instance_;
  delete myproto_reflection_;
  delete m_sum::default_instance_;
  delete m_sum_reflection_;
  delete m_prod::default_instance_;
  delete m_prod_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\"*\n\007myproto\022\t\n\001a\030\001 \001(\021\022\t\n\001b\030"
    "\002 \001(\021\022\t\n\001c\030\003 \001(\021\"S\n\005m_sum\022\032\n\010response\030\001 "
    "\001(\0132\010.myproto\022\026\n\004num1\030\002 \001(\0132\010.myproto\022\026\n"
    "\004num2\030\003 \001(\0132\010.myproto\"6\n\006m_prod\022\020\n\010respo"
    "nse\030\001 \001(\021\022\014\n\004num1\030\002 \001(\021\022\014\n\004num2\030\003 \001(\021", 197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  myproto::default_instance_ = new myproto();
  m_sum::default_instance_ = new m_sum();
  m_prod::default_instance_ = new m_prod();
  myproto::default_instance_->InitAsDefaultInstance();
  m_sum::default_instance_->InitAsDefaultInstance();
  m_prod::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int myproto::kAFieldNumber;
const int myproto::kBFieldNumber;
const int myproto::kCFieldNumber;
#endif  // !_MSC_VER

myproto::myproto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void myproto::InitAsDefaultInstance() {
}

myproto::myproto(const myproto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void myproto::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  b_ = 0;
  c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

myproto::~myproto() {
  SharedDtor();
}

void myproto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void myproto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* myproto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return myproto_descriptor_;
}

const myproto& myproto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

myproto* myproto::default_instance_ = NULL;

myproto* myproto::New() const {
  return new myproto;
}

void myproto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
    b_ = 0;
    c_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool myproto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // optional sint32 b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // optional sint32 c = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void myproto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->a(), output);
  }

  // optional sint32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->b(), output);
  }

  // optional sint32 c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* myproto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->a(), target);
  }

  // optional sint32 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->b(), target);
  }

  // optional sint32 c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int myproto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->a());
    }

    // optional sint32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->b());
    }

    // optional sint32 c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void myproto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const myproto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const myproto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void myproto::MergeFrom(const myproto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void myproto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void myproto::CopyFrom(const myproto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool myproto::IsInitialized() const {

  return true;
}

void myproto::Swap(myproto* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata myproto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = myproto_descriptor_;
  metadata.reflection = myproto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int m_sum::kResponseFieldNumber;
const int m_sum::kNum1FieldNumber;
const int m_sum::kNum2FieldNumber;
#endif  // !_MSC_VER

m_sum::m_sum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void m_sum::InitAsDefaultInstance() {
  response_ = const_cast< ::myproto*>(&::myproto::default_instance());
  num1_ = const_cast< ::myproto*>(&::myproto::default_instance());
  num2_ = const_cast< ::myproto*>(&::myproto::default_instance());
}

m_sum::m_sum(const m_sum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void m_sum::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  num1_ = NULL;
  num2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

m_sum::~m_sum() {
  SharedDtor();
}

void m_sum::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete num1_;
    delete num2_;
  }
}

void m_sum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_sum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_sum_descriptor_;
}

const m_sum& m_sum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

m_sum* m_sum::default_instance_ = NULL;

m_sum* m_sum::New() const {
  return new m_sum;
}

void m_sum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response()) {
      if (response_ != NULL) response_->::myproto::Clear();
    }
    if (has_num1()) {
      if (num1_ != NULL) num1_->::myproto::Clear();
    }
    if (has_num2()) {
      if (num2_ != NULL) num2_->::myproto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool m_sum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .myproto response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_num1;
        break;
      }

      // optional .myproto num1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_num2;
        break;
      }

      // optional .myproto num2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void m_sum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .myproto response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .myproto num1 = 2;
  if (has_num1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->num1(), output);
  }

  // optional .myproto num2 = 3;
  if (has_num2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->num2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* m_sum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .myproto response = 1;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .myproto num1 = 2;
  if (has_num1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->num1(), target);
  }

  // optional .myproto num2 = 3;
  if (has_num2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->num2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int m_sum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .myproto response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .myproto num1 = 2;
    if (has_num1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->num1());
    }

    // optional .myproto num2 = 3;
    if (has_num2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->num2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_sum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const m_sum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const m_sum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_sum::MergeFrom(const m_sum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::myproto::MergeFrom(from.response());
    }
    if (from.has_num1()) {
      mutable_num1()->::myproto::MergeFrom(from.num1());
    }
    if (from.has_num2()) {
      mutable_num2()->::myproto::MergeFrom(from.num2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void m_sum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_sum::CopyFrom(const m_sum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_sum::IsInitialized() const {

  return true;
}

void m_sum::Swap(m_sum* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(num1_, other->num1_);
    std::swap(num2_, other->num2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata m_sum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_sum_descriptor_;
  metadata.reflection = m_sum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int m_prod::kResponseFieldNumber;
const int m_prod::kNum1FieldNumber;
const int m_prod::kNum2FieldNumber;
#endif  // !_MSC_VER

m_prod::m_prod()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void m_prod::InitAsDefaultInstance() {
}

m_prod::m_prod(const m_prod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void m_prod::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0;
  num1_ = 0;
  num2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

m_prod::~m_prod() {
  SharedDtor();
}

void m_prod::SharedDtor() {
  if (this != default_instance_) {
  }
}

void m_prod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_prod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_prod_descriptor_;
}

const m_prod& m_prod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

m_prod* m_prod::default_instance_ = NULL;

m_prod* m_prod::New() const {
  return new m_prod;
}

void m_prod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_ = 0;
    num1_ = 0;
    num2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool m_prod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num1;
        break;
      }

      // optional sint32 num1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &num1_)));
          set_has_num1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num2;
        break;
      }

      // optional sint32 num2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &num2_)));
          set_has_num2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void m_prod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->response(), output);
  }

  // optional sint32 num1 = 2;
  if (has_num1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->num1(), output);
  }

  // optional sint32 num2 = 3;
  if (has_num2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->num2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* m_prod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 response = 1;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->response(), target);
  }

  // optional sint32 num1 = 2;
  if (has_num1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->num1(), target);
  }

  // optional sint32 num2 = 3;
  if (has_num2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->num2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int m_prod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->response());
    }

    // optional sint32 num1 = 2;
    if (has_num1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->num1());
    }

    // optional sint32 num2 = 3;
    if (has_num2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->num2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_prod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const m_prod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const m_prod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_prod::MergeFrom(const m_prod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_num1()) {
      set_num1(from.num1());
    }
    if (from.has_num2()) {
      set_num2(from.num2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void m_prod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_prod::CopyFrom(const m_prod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_prod::IsInitialized() const {

  return true;
}

void m_prod::Swap(m_prod* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(num1_, other->num1_);
    std::swap(num2_, other->num2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata m_prod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_prod_descriptor_;
  metadata.reflection = m_prod_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
