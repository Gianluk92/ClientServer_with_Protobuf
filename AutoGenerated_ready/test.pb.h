// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class myproto;
class m_sum;
class m_prod;

// ===================================================================

class myproto : public ::google::protobuf::Message {
 public:
  myproto();
  virtual ~myproto();

  myproto(const myproto& from);

  inline myproto& operator=(const myproto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const myproto& default_instance();

  void Swap(myproto* other);

  // implements Message ----------------------------------------------

  myproto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const myproto& from);
  void MergeFrom(const myproto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // optional sint32 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // optional sint32 c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline ::google::protobuf::int32 c() const;
  inline void set_c(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:myproto)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static myproto* default_instance_;
};
// -------------------------------------------------------------------

class m_sum : public ::google::protobuf::Message {
 public:
  m_sum();
  virtual ~m_sum();

  m_sum(const m_sum& from);

  inline m_sum& operator=(const m_sum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const m_sum& default_instance();

  void Swap(m_sum* other);

  // implements Message ----------------------------------------------

  m_sum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const m_sum& from);
  void MergeFrom(const m_sum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .myproto response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline const ::myproto& response() const;
  inline ::myproto* mutable_response();
  inline ::myproto* release_response();
  inline void set_allocated_response(::myproto* response);

  // optional .myproto num1 = 2;
  inline bool has_num1() const;
  inline void clear_num1();
  static const int kNum1FieldNumber = 2;
  inline const ::myproto& num1() const;
  inline ::myproto* mutable_num1();
  inline ::myproto* release_num1();
  inline void set_allocated_num1(::myproto* num1);

  // optional .myproto num2 = 3;
  inline bool has_num2() const;
  inline void clear_num2();
  static const int kNum2FieldNumber = 3;
  inline const ::myproto& num2() const;
  inline ::myproto* mutable_num2();
  inline ::myproto* release_num2();
  inline void set_allocated_num2(::myproto* num2);

  // @@protoc_insertion_point(class_scope:m_sum)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_num1();
  inline void clear_has_num1();
  inline void set_has_num2();
  inline void clear_has_num2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::myproto* response_;
  ::myproto* num1_;
  ::myproto* num2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static m_sum* default_instance_;
};
// -------------------------------------------------------------------

class m_prod : public ::google::protobuf::Message {
 public:
  m_prod();
  virtual ~m_prod();

  m_prod(const m_prod& from);

  inline m_prod& operator=(const m_prod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const m_prod& default_instance();

  void Swap(m_prod* other);

  // implements Message ----------------------------------------------

  m_prod* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const m_prod& from);
  void MergeFrom(const m_prod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline ::google::protobuf::int32 response() const;
  inline void set_response(::google::protobuf::int32 value);

  // optional sint32 num1 = 2;
  inline bool has_num1() const;
  inline void clear_num1();
  static const int kNum1FieldNumber = 2;
  inline ::google::protobuf::int32 num1() const;
  inline void set_num1(::google::protobuf::int32 value);

  // optional sint32 num2 = 3;
  inline bool has_num2() const;
  inline void clear_num2();
  static const int kNum2FieldNumber = 3;
  inline ::google::protobuf::int32 num2() const;
  inline void set_num2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:m_prod)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_num1();
  inline void clear_has_num1();
  inline void set_has_num2();
  inline void clear_has_num2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 response_;
  ::google::protobuf::int32 num1_;
  ::google::protobuf::int32 num2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static m_prod* default_instance_;
};
// ===================================================================


// ===================================================================

// myproto

// optional sint32 a = 1;
inline bool myproto::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void myproto::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void myproto::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void myproto::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 myproto::a() const {
  return a_;
}
inline void myproto::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// optional sint32 b = 2;
inline bool myproto::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void myproto::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void myproto::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void myproto::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 myproto::b() const {
  return b_;
}
inline void myproto::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// optional sint32 c = 3;
inline bool myproto::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void myproto::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void myproto::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void myproto::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline ::google::protobuf::int32 myproto::c() const {
  return c_;
}
inline void myproto::set_c(::google::protobuf::int32 value) {
  set_has_c();
  c_ = value;
}

// -------------------------------------------------------------------

// m_sum

// optional .myproto response = 1;
inline bool m_sum::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void m_sum::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void m_sum::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void m_sum::clear_response() {
  if (response_ != NULL) response_->::myproto::Clear();
  clear_has_response();
}
inline const ::myproto& m_sum::response() const {
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::myproto* m_sum::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::myproto;
  return response_;
}
inline ::myproto* m_sum::release_response() {
  clear_has_response();
  ::myproto* temp = response_;
  response_ = NULL;
  return temp;
}
inline void m_sum::set_allocated_response(::myproto* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
}

// optional .myproto num1 = 2;
inline bool m_sum::has_num1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void m_sum::set_has_num1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void m_sum::clear_has_num1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void m_sum::clear_num1() {
  if (num1_ != NULL) num1_->::myproto::Clear();
  clear_has_num1();
}
inline const ::myproto& m_sum::num1() const {
  return num1_ != NULL ? *num1_ : *default_instance_->num1_;
}
inline ::myproto* m_sum::mutable_num1() {
  set_has_num1();
  if (num1_ == NULL) num1_ = new ::myproto;
  return num1_;
}
inline ::myproto* m_sum::release_num1() {
  clear_has_num1();
  ::myproto* temp = num1_;
  num1_ = NULL;
  return temp;
}
inline void m_sum::set_allocated_num1(::myproto* num1) {
  delete num1_;
  num1_ = num1;
  if (num1) {
    set_has_num1();
  } else {
    clear_has_num1();
  }
}

// optional .myproto num2 = 3;
inline bool m_sum::has_num2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void m_sum::set_has_num2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void m_sum::clear_has_num2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void m_sum::clear_num2() {
  if (num2_ != NULL) num2_->::myproto::Clear();
  clear_has_num2();
}
inline const ::myproto& m_sum::num2() const {
  return num2_ != NULL ? *num2_ : *default_instance_->num2_;
}
inline ::myproto* m_sum::mutable_num2() {
  set_has_num2();
  if (num2_ == NULL) num2_ = new ::myproto;
  return num2_;
}
inline ::myproto* m_sum::release_num2() {
  clear_has_num2();
  ::myproto* temp = num2_;
  num2_ = NULL;
  return temp;
}
inline void m_sum::set_allocated_num2(::myproto* num2) {
  delete num2_;
  num2_ = num2;
  if (num2) {
    set_has_num2();
  } else {
    clear_has_num2();
  }
}

// -------------------------------------------------------------------

// m_prod

// optional sint32 response = 1;
inline bool m_prod::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void m_prod::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void m_prod::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void m_prod::clear_response() {
  response_ = 0;
  clear_has_response();
}
inline ::google::protobuf::int32 m_prod::response() const {
  return response_;
}
inline void m_prod::set_response(::google::protobuf::int32 value) {
  set_has_response();
  response_ = value;
}

// optional sint32 num1 = 2;
inline bool m_prod::has_num1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void m_prod::set_has_num1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void m_prod::clear_has_num1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void m_prod::clear_num1() {
  num1_ = 0;
  clear_has_num1();
}
inline ::google::protobuf::int32 m_prod::num1() const {
  return num1_;
}
inline void m_prod::set_num1(::google::protobuf::int32 value) {
  set_has_num1();
  num1_ = value;
}

// optional sint32 num2 = 3;
inline bool m_prod::has_num2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void m_prod::set_has_num2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void m_prod::clear_has_num2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void m_prod::clear_num2() {
  num2_ = 0;
  clear_has_num2();
}
inline ::google::protobuf::int32 m_prod::num2() const {
  return num2_;
}
inline void m_prod::set_num2(::google::protobuf::int32 value) {
  set_has_num2();
  num2_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
